package main

import (
	"context"
	"fmt"
	"io"
	"math/rand"
	"net/http"
	"os"
	"strconv"
	"strings"
	"sync"
	"sync/atomic"
	"time"
)

const (
	maxWorkers = 5000 // Increased worker count
	rampUpTime = 10 * time.Second
)

var (
	successCount uint64
	failCount    uint64
)

func worker(ctx context.Context, wg *sync.WaitGroup, target string) {
	defer wg.Done()
	
	client := &http.Client{
		Transport: &http.Transport{
			MaxIdleConnsPerHost: 100,
			DisableKeepAlives:   false,
		},
		Timeout: 10 * time.Second,
	}

	for {
		select {
		case <-ctx.Done():
			return
		default:
			start := time.Now()
			req, err := http.NewRequest("GET", target, nil)
			if err != nil {
				atomic.AddUint64(&failCount, 1)
				continue
			}

			// Professional headers
			req.Header.Set("User-Agent", fmt.Sprintf("LoadTester/%d", rand.Intn(1000)))
			req.Header.Set("X-Load-Test", "true")
			req.Header.Set("Accept", "text/html,application/xhtml+xml")

			resp, err := client.Do(req)
			if err != nil {
				atomic.AddUint64(&failCount, 1)
				continue
			}

			io.Copy(io.Discard, resp.Body)
			resp.Body.Close()
			
			atomic.AddUint64(&successCount, 1)
			if time.Since(start) > 500*time.Millisecond {
				fmt.Printf("Slow response: %v\n", time.Since(start))
			}
		}
	}
}

func main() {
	if len(os.Args) < 3 {
		fmt.Println("Usage: go run pro_tester.go <target> <duration>")
		return
	}

	target := os.Args[1]
	if !strings.HasPrefix(target, "http") {
		target = "https://" + target
	}

	duration, err := strconv.Atoi(os.Args[2])
	if err != nil {
		fmt.Println("Invalid duration")
		return
	}

	ctx, cancel := context.WithTimeout(context.Background(), time.Duration(duration)*time.Second)
	defer cancel()

	var wg sync.WaitGroup

	fmt.Printf("Starting professional load test (%d workers)\n", maxWorkers)
	fmt.Println("Ramping up workers...")

	// Gradual ramp-up
	for i := 0; i < maxWorkers; i++ {
		wg.Add(1)
		go worker(ctx, &wg, target)
		if i%100 == 0 {
			time.Sleep(rampUpTime / time.Duration(maxWorkers/100))
		}
	}

	// Progress monitoring
	go func() {
		ticker := time.NewTicker(5 * time.Second)
		defer ticker.Stop()
		
		for {
			select {
			case <-ticker.C:
				s := atomic.LoadUint64(&successCount)
				f := atomic.LoadUint64(&failCount)
				fmt.Printf("Requests: %d/s (Success: %d, Fail: %d)\n", 
					(s+f)/5, s, f)
				atomic.StoreUint64(&successCount, 0)
				atomic.StoreUint64(&failCount, 0)
			case <-ctx.Done():
				return
			}
		}
	}()

	wg.Wait()
	fmt.Println("Load test completed")
}
